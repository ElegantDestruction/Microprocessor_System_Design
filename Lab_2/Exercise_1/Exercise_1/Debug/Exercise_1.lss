
Exercise_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000513  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000498  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024f  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	31 c0       	rjmp	.+98     	; 0x94 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:
	//Declare Variables
	int led = 1;
	int flag = 1;
	
	//Set DDRB so LEDs are out
	DDRB = 0xff;
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	87 bb       	out	0x17, r24	; 23

int main(void)
{
	//Declare Variables
	int led = 1;
	int flag = 1;
  38:	21 e0       	ldi	r18, 0x01	; 1
  3a:	30 e0       	ldi	r19, 0x00	; 0
#include <util/delay.h>

int main(void)
{
	//Declare Variables
	int led = 1;
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	90 e0       	ldi	r25, 0x00	; 0
		if (flag){
			led <<= 1;		//Shift left once
			
			//Detect if reached 256
			if (led==256){
				flag = 0;
  40:	71 e0       	ldi	r23, 0x01	; 1
  42:	60 e0       	ldi	r22, 0x00	; 0
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	e0 e0       	ldi	r30, 0x00	; 0
	
	//Create do-while loop
	do {
		
		//Set the output equal to ~led
		PORTB = ~led;
  48:	48 2f       	mov	r20, r24
  4a:	40 95       	com	r20
  4c:	48 bb       	out	0x18, r20	; 24
		
		//Detect shift direction
		if (flag){
  4e:	21 15       	cp	r18, r1
  50:	31 05       	cpc	r19, r1
  52:	59 f0       	breq	.+22     	; 0x6a <__SREG__+0x2b>
			led <<= 1;		//Shift left once
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
			
			//Detect if reached 256
			if (led==256){
  58:	81 15       	cp	r24, r1
  5a:	41 e0       	ldi	r20, 0x01	; 1
  5c:	94 07       	cpc	r25, r20
  5e:	81 f4       	brne	.+32     	; 0x80 <__SREG__+0x41>
				flag = 0;
  60:	2f 2f       	mov	r18, r31
  62:	3e 2f       	mov	r19, r30
				led=led/4;		//Grab first two bits of led to restart at "10"
  64:	80 e4       	ldi	r24, 0x40	; 64
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	0b c0       	rjmp	.+22     	; 0x80 <__SREG__+0x41>
			}
		}
		else{
			led >>= 1;		//Shift right once
  6a:	95 95       	asr	r25
  6c:	87 95       	ror	r24
		if (flag){
			led <<= 1;		//Shift left once
			
			//Detect if reached 256
			if (led==256){
				flag = 0;
  6e:	57 2f       	mov	r21, r23
  70:	46 2f       	mov	r20, r22
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	91 05       	cpc	r25, r1
  76:	11 f0       	breq	.+4      	; 0x7c <__SREG__+0x3d>
  78:	5f 2f       	mov	r21, r31
  7a:	4e 2f       	mov	r20, r30
  7c:	25 2f       	mov	r18, r21
  7e:	34 2f       	mov	r19, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	5f ef       	ldi	r21, 0xFF	; 255
  82:	a1 ee       	ldi	r26, 0xE1	; 225
  84:	44 e0       	ldi	r20, 0x04	; 4
  86:	51 50       	subi	r21, 0x01	; 1
  88:	a0 40       	sbci	r26, 0x00	; 0
  8a:	40 40       	sbci	r20, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <__SREG__+0x47>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <__SREG__+0x51>
  90:	00 00       	nop
  92:	da cf       	rjmp	.-76     	; 0x48 <__SREG__+0x9>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
